AWSTemplateFormatVersion: '2010-09-09'
Description:
  Lambda Create
# ------------------------------------------------------------#
#  Metadata
# ------------------------------------------------------------#
Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "Lambda Configuration"
        Parameters:
        - FunctionName
        - Description
        - Handler
        - MemorySize
        - Runtime
        - Timeout
        - TagsName

# ------------------------------------------------------------#
#  InputParameters
# ------------------------------------------------------------#
Parameters:
  FunctionName:
    Type: String
    Default: "cfn-lmd-writedynamodb-inamura"
  Description:
    Type: String
    Default: "cfn-lmd-writedynamodb-inamura"
  Handler:
    Type: String
    Default: "index.lambda_handler"
  MemorySize:
    Type: String
    Default: "128"
  Runtime:
    Type: String
    Default: "python3.9"
  Timeout:
    Type: String
    Default: "10"
  TagsName:
    Type: String
    Default: "inamura"
# ------------------------------------------------------------#
#  Resources
# ------------------------------------------------------------#
Resources:
# ------------------------------------------------------------#
#  Lambda
# ------------------------------------------------------------#
  Lambda:
    Type: 'AWS::Lambda::Function'
    Properties:
      Code:
        ZipFile: |
          import base64
          import json
          import boto3
          import decimal

          #DynamoDBオブジェクト
          dynamodb = boto3.resource('dynamodb')

          # #シーケンスDB連番を更新
          # def next_seq(table, email)
          #   response = table.update_item(
          #     Key={
          #     'email' : email
          #     },
          #     UpdateExpression="set seq = seq + :val",
          #     ExpressionAttributeValues= {
          #       ':val' : 1
          #     },
          #     ReturnValues='UPDATED_NEW'
          #   )
          #   return response['Attributes']['seq']
          
          def lambda_handler(event, context):
            try:
              # #シーケンスデータ作成
              # seqtable = dynamodb.Table('mailaddress')
              # nextseq = next_seq(seqtable, 'user')

              #フォームの入力データを得る
              body = event['body']
              if event['isBase64Encoded']:
                body = base64.b64decode(body)

              decoded = json.loads(body)
              username = decoded['username']
              email = decoded['email']
              notsend = decoded['notsend']
              send = decoded['send']

              #クライアントのIPアドレス
              host = event['requestContext']['http']['sourceIp']

              #現在のUNIXタイムスタンプ
              now = time.time()

              #mailaddressテーブルに登録する
              mailaddress = dynamodb.Table('mailaddress')
              mailaddress.put_item(
                Item={
                  'username' : username,
                  'email' : email,
                  'notsend' : notsend,
                  'send' : send,
                  'accepted_at' : decimal.Decimal(str(now)),
                  'host' : host
                }
              )
              #結果を返す
              return json.dumps({})

            except:
            #エラーメッセージを返す
              import traceback
              err = traceback.format_exc()
              print(err)

              return {
                'statusCode' : 500,
                'headers' : {
                  'context-type' : 'text/json'
                },
                'body' : json.dumps({
                  'error' : '内部エラーが発生しました'
                  })
                }

      Description: !Ref Description
      FunctionName: !Ref FunctionName
      Handler: !Ref Handler 
      MemorySize: !Ref MemorySize
      Runtime: !Ref Runtime
      Timeout: !Ref Timeout
      Role: !GetAtt LambdaRole.Arn
      Tags:
        - Key: "User"
          Value: !Ref TagsName

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub "${FunctionName}-role"
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action: "sts:AssumeRole"
            Principal:
              Service: lambda.amazonaws.com
      Policies:
        - PolicyName: !Sub "${FunctionName}-policy"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: "Allow"
                Action:
                  - "logs:CreateLogStream"
                  - "logs:PutLogEvents"
                  - "logs:CreateLogGroup"
                Resource: !Sub "arn:${AWS::Partition}:logs:*:*:*"

              - Effect: "Allow"
                Action:
                  - "dynamodb:*" 
                Resource: "arn:aws:dynamodb:ap-northeast-1:717076937412:*"


# ------------------------------------------------------------#
# Output Parameters
#------------------------------------------------------------#          
Outputs:
  LambdaArn:
    Value: !GetAtt Lambda.Arn
    Export:
      Name: !Sub "${FunctionName}-arn"
  LambdaName:
    Value: !Ref FunctionName
    Export:
      Name: !Sub "${FunctionName}-name"